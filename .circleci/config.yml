version: 2.0

references:
  working-directory: &working-directory ~/code
  workspace-directory: &workspace-directory /tmp/workspace
  results-directory: &results-directory /tmp/test-results
  node-version: &node-version 10.15.0
  cache-key: &cache-key v2-dependencies-{{ checksum "yarn.lock" }}

  container-config: &container-config
    docker:
      - image: circleci/node:8
    working_directory: *working-directory

  step-checkout-code: &step-checkout-code checkout

  step-install-node: &step-install-node
    run:
      name: Install Node.js
      command: |
        nvm install $NODE_VERSION
        nvm alias default $NODE_VERSION
      environment:
        NODE_VERSION: *node-version

  step-remove-system-yarn: &step-remove-system-yarn
    run:
      name: Remove existing Yarn
      command: |
        YARN=$(which yarn)
        if [[ -n "$YARN" ]]; then
          echo "Removing Yarn at $YARN"
          sudo rm -f "$YARN"
        fi

  step-install-yarn: &step-install-yarn
    run:
      name: Install Yarn
      command: |
        sudo apt-get update
        sudo apt-get install -y apt-transport-https
        curl -sSL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
        echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
        sudo apt-get update
        # transform the '>=x.y.z' version constraint in package.json to the 'x.y.z-1' version format of apt-get
        sudo apt-get install --no-install-recommends yarn=`jq -r '.engines.yarn' < package.json | sed -E 's/^>=?//' | sed -e 's/$/-1/'`

  step-install-yarn-dependencies: &step-install-yarn-dependencies
    run:
      name: Install dependencies
      command: yarn --frozen-lockfile

  step-yarn-clean: &step-yarn-clean
    run:
      name: Cleaning builds
      command: yarn run clean

  step-yarn-build: &step-yarn-build
    run:
      name: Building
      command: yarn run build

  step-run-package-tests: &step-run-package-tests
    run:
      name: Run package tests
      command: yarn test
      environment:
        CIRCLE_TEST_REPORTS: *results-directory

  step-store-package-test-results: &step-store-package-test-results
    store_test_results:
      path: *results-directory
      when: always

  step-store-package-test-results-as-artifacts: &step-store-package-test-results-as-artifacts
    store_artifacts:
      path: *results-directory
      destination: test-results
      when: always

  step-store-builds-to-workspace: &step-store-builds-to-workspace
    persist_to_workspace:
      # Must be an absolute path, or relative path from working_directory.
      # This is a directory on the container which is taken to be the root
      # directory of the workspace.
      root: .
      # Must be relative path from root.
      paths:
        - packages/*/dist

  step-restore-builds-from-workspace: &step-restore-builds-from-workspace
    run:
      name: Restore builds from workspace
      # trailing / on workspace needed to 'merge' files into working directory
      command: rsync -rvt "$WORKSPACE_DIR/" .
      environment:
        WORKSPACE_DIR: *workspace-directory

jobs:
  build:
    <<: *container-config
    steps:
      - *step-checkout-code
      - *step-remove-system-yarn
      - *step-install-yarn
      - *step-install-yarn-dependencies
      - *step-yarn-clean
      - *step-yarn-build
      - *step-store-builds-to-workspace

  test-package:
    <<: *container-config
    steps:
      - *step-checkout-code
      - *step-install-yarn
      - *step-install-yarn-dependencies
      - *step-yarn-build
      - *step-run-package-tests
      - *step-store-package-test-results
      - *step-store-package-test-results-as-artifacts

workflows:
  version: 2
  onpush:
    jobs:
      - build:
          context: org-global
      - test-package:
          requires:
            - build
